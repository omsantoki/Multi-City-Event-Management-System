--1 Identify Top-Rated Events with Their Artists and Categories
SELECT e.Title, r.Average_Rating, a.Name AS Artist_Name, c.Name AS Category
FROM Report r
JOIN Event e ON r.Event_ID = e.Event_ID
JOIN Performance p ON e.Event_ID = p.Event_ID
JOIN Artist a ON p.Artist_ID = a.Artist_ID
JOIN Event_Category ec ON e.Event_ID = ec.Event_ID
JOIN Category c ON ec.Category_ID = c.Category_ID
WHERE r.Average_Rating >= 8
ORDER BY r.Average_Rating DESC;

--2 Find Attendees Who Booked Tickets But Didn't Receive Delivery
SELECT DISTINCT u.Name, ue.Email
FROM Tickets t
JOIN Attendee a ON t.Attendee_ID = a.Attendee_ID
JOIN Users u ON a.User_ID = u.User_ID
JOIN User_Email ue ON u.User_ID = ue.User_ID
JOIN Delivery d ON t.Delivery_ID = d.Delivery_ID
WHERE d.Status != 'Delivered'
  AND t.Delivery_Mode = 'Physical';

--3 List Organizers with Most Events and Total Revenue Generated
SELECT u.Name AS Organizer_Name,
       COUNT(DISTINCT oce.Event_ID) AS Total_Events,
       SUM(r.Revenue) AS Total_Revenue
FROM Organizer o
JOIN Users u ON o.User_ID = u.User_ID
JOIN Organizer_Creates_Event oce ON o.Organizer_ID = oce.Organizer_ID
JOIN Report r ON oce.Event_ID = r.Event_ID
GROUP BY u.Name
ORDER BY Total_Revenue DESC;


--4 Show total revenue generated by each admin from their reports
SELECT u.Name AS Admin_Name,
       a.Admin_ID,
       SUM(r.Revenue) AS Total_Revenue
FROM Admins a
JOIN Users u ON a.User_ID = u.User_ID
JOIN Report r ON a.Admin_ID = r.Admin_ID
GROUP BY u.Name, a.Admin_ID
ORDER BY Total_Revenue DESC;


--5 Get Artists Performing in Multiple Cities
SELECT a.Name AS Artist_Name, COUNT(DISTINCT ci.Name) AS City_Count
FROM Artist a
JOIN Performance p ON a.Artist_ID = p.Artist_ID
JOIN Event e ON p.Event_ID = e.Event_ID
JOIN City ci ON e.City_ID = ci.City_ID
GROUP BY a.Name
HAVING COUNT(DISTINCT ci.Name) > 1;


--6 Recommend Events for Attendees Based on Wishlist Categories
SELECT DISTINCT e2.Title, c2.Name AS Category
FROM Wishlist w
JOIN Event_Category ec1 ON w.Event_ID = ec1.Event_ID
JOIN Category c1 ON ec1.Category_ID = c1.Category_ID
JOIN Event_Category ec2 ON c1.Category_ID = ec2.Category_ID
JOIN Event e2 ON ec2.Event_ID = e2.Event_ID
JOIN Category c2 ON ec2.Category_ID = c2.Category_ID
WHERE w.Attendee_ID = 2 AND e2.Event_ID != w.Event_ID;

--7 List Most Common Delivery Cities for Physical Tickets
SELECT ci.Name AS City, COUNT(*) AS Deliveries
FROM Delivery d
JOIN Tickets t ON d.Delivery_ID = t.Delivery_ID
JOIN Event e ON t.Event_ID = e.Event_ID
JOIN City ci ON e.City_ID = ci.City_ID
WHERE t.Delivery_Mode = 'Physical'
GROUP BY ci.Name
ORDER BY Deliveries DESC;

--8 Detect Users Who Gave Extremely Low Ratings
(To detect and ban spam users)
SELECT u.Name, u.User_ID, COUNT(*) AS Low_Rating_Count
FROM Rating ra
JOIN Attendee at ON ra.Attendee_ID = at.Attendee_ID
JOIN Users u ON at.User_ID = u.User_ID
WHERE ra.Score <= 3
GROUP BY u.Name, u.User_ID
HAVING COUNT(*) > 10;

--9 Attendees Database
SELECT 
    a.Attendee_ID, 
    u.Name, 
    COUNT(DISTINCT r.Rating_ID) AS Ratings_Given, 
    COUNT(DISTINCT w.Event_ID) AS Wishlist_Events, 
    COUNT(DISTINCT t.Order_ID) AS Tickets_Booked
FROM Attendee a
JOIN Users u ON a.User_ID = u.User_ID
LEFT JOIN Rating r ON a.Attendee_ID = r.Attendee_ID
LEFT JOIN Wishlist w ON a.Attendee_ID = w.Attendee_ID
LEFT JOIN Tickets t ON a.Attendee_ID = t.Attendee_ID
GROUP BY a.Attendee_ID, u.Name
ORDER BY Tickets_Booked DESC;


--10 Admin Delivery Management Efficiency
SELECT 
    a.Admin_ID,
    u.Name AS Admin_Name,
    COUNT(d.Delivery_ID) FILTER (WHERE d.Status = 'Delivered') AS Successful_Deliveries,
    COUNT(d.Delivery_ID) AS Total_Handled,
    ROUND(
        COUNT(d.Delivery_ID) FILTER (WHERE d.Status = 'Delivered') * 100.0 / NULLIF(COUNT(d.Delivery_ID), 0), 
        2
    ) AS Success_Rate_Percent
FROM Admins a
JOIN Users u ON a.User_ID = u.User_ID
LEFT JOIN Delivery d ON a.Admin_ID = d.Admin_ID
GROUP BY a.Admin_ID, u.Name
ORDER BY Success_Rate_Percent DESC;


--11 City-wise Event Capacity and Usage
SELECT c.Name, SUM(e.Capacity) AS Total_Capacity, SUM(r.Attendees_Count) AS Total_Attended
FROM Event e
JOIN City c ON e.City_ID = c.City_ID
JOIN Report r ON e.Event_ID = r.Event_ID
GROUP BY c.Name;


--12 Cancelled Orders & Refund Tracking
SELECT u.Name, e.Title, t.Payment_Mode, t.Payment_Portal,t.Transaction_ID
FROM Attendee a
JOIN Users u ON a.Attendee_ID = u.User_ID
JOIN Tickets t ON t.Attendee_ID = a.Attendee_ID
JOIN Event e ON t.Event_ID = e.Event_ID
WHERE t.Status = 'Cancelled'
ORDER BY t.Order_ID DESC;

